const playwright = require("playwright-aws-lambda"); export default async (a, e) => { var t = null, i = [], s = []; const { query: r } = a; e.setHeader("Content-Type", "application/json"); var l = r.p; void 0 === l && (l = "110051"); var n = -1; switch (r.f) { case "covaxin": n = 4; break; case "covishield": n = 3; break; case "sputnik": n = 5; break; case "18": n = 1; break; case "45": n = 2; break; case "free": n = 6; break; case "paid": n = 7 }t = await playwright.launchChromium({ headless: !0, handleSIGINT: !1, handleSIGTERM: !1, handleSIGHUP: !1 }); const o = await t.newContext({ userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 OPR/68.0.3618.125" }), c = await o.newPage(); await c.route("**/*.{png,svg,jpg,jpeg,woff2,css}", a => a.abort()); try { await c.goto("https://www.cowin.gov.in/home"); var w = await c.waitForSelector('//*[@id="mat-input-0"]'); await w.type(l); var d = await c.$('//*[@class="pin-search-btn"]'); await d.click(); var h = await c.waitForSelector("div.mobile-hide"); if (-1 !== n) { var p = await h.waitForSelector("div:nth-child(1) > div:nth-child(1) > div:nth-child(" + n + ") > label:nth-child(2)"); await p.click() } await h.waitForSelector('div[class="row ng-star-inserted"]'); var v = await h.$$('div[class="row ng-star-inserted"]'); if (0 !== v.length) { var u, g; for (i.push({ error: !1 }), u = 0; u < v.length; u++) { var b = "UNKNOWN", f = "UNKNOWN", N = await v[u].$('h5[class="center-name-title"]'), k = await v[u].$('p[class="center-name-text"]'), m = await v[u].$('ul[class="slot-available-wrap"]'), x = await m.$$("li"), O = []; for (g = 0; g < x.length; g++) { var y = await c.evaluate(a => a.textContent, x[g]), C = "UNKNOWN", S = "UNKNOWN", $ = y.toLowerCase(); -1 !== $.lastIndexOf("booked") && (S = C = "BOOKED", b = $.split("booked ")[1].split(" ")[0], f = $.split(b + " ")[1]), -1 !== $.lastIndexOf(" na ") && (S = C = "Not Avaliable"), -1 !== $.lastIndexOf("d1") && (C = $.split("d1 ")[1].split(" ")[0], S = $.split("d2 ")[1].split(" ")[0]), O.push({ first_dose: C, second_dose: S }) } var I = await c.evaluate(a => a.textContent, N), K = await c.evaluate(a => a.textContent, k); s.push({ center_name: I, center_address: K, vaccine: b, age: f, sessions: O }) } i.push(s) } else i.push({ error: !0, message: "no vaccine center available in this pincode" }) } catch (a) { i.push({ error: !0, message: a.message }) } finally { await t.close(), e.status(200).send({ result: i }) } };